{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","res","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMsg","setErrorMsg","useEffect","noteService","initialNotes","notesToShow","filter","map","key","find","n","changedNote","updatedNote","catch","err","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"kNAYeA,EAVF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,mBAAqB,iBACpD,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,K,gBCsB3B,EArBA,WACb,IAAMK,EAAUC,IAAMC,IARR,cASRC,EAAc,CAClBC,GAAI,IACJN,QAAS,mCACTO,KAAM,2BACNT,WAAW,GAEb,OAAOI,EAAQM,MAAK,SAACC,GAAD,OAAcA,EAASC,KAAKC,OAAON,OAa1C,EAVA,SAACO,GAEd,OADYT,IAAMU,KAnBJ,aAmBkBD,GACrBJ,MAAK,SAACM,GAAD,OAASA,EAAIJ,SAQhB,EALA,SAACJ,EAAIM,GAElB,OADYT,IAAMY,IAAN,UAxBE,aAwBF,YAAwBT,GAAMM,GAC/BJ,MAAK,SAACM,GAAD,OAASA,EAAIJ,SChBhBM,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAGF,yBAAKlB,UAAU,SAASkB,ICF3BC,EAAS,WAOb,OACE,yBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKR,6BACA,uGAyFSC,EAlFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,iBAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIgBN,mBAAS,MAJzB,mBAITO,EAJS,KAICC,EAJD,KAYhBC,qBANa,WACXC,IAAqB1B,MAAK,SAAC2B,GACzBT,EAASS,QAIG,IAEhB,IAuCMC,EAAcP,EAAUJ,EAAQA,EAAMY,QAAO,SAAC1C,GAAD,OAAUA,EAAKG,aAElE,OACE,6BACE,qCACA,kBAAC,EAAD,CAAcmB,QAASc,IACvB,6BACE,4BAAQ9B,QAAS,kBAAM6B,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BACGO,EAAYE,KAAI,SAAC3C,GAAD,OACf,kBAAC,EAAD,CACE4C,IAAK5C,EAAKW,GACVX,KAAMA,EACNC,iBAAkB,kBAzCD,SAACU,GAC1B,IAAMX,EAAO8B,EAAMe,MAAK,SAACC,GAAD,OAAOA,EAAEnC,KAAOA,KAClCoC,EAAW,2BAAQ/C,GAAR,IAAcG,WAAYH,EAAKG,YAEhDoC,EACU5B,EAAIoC,GACXlC,MAAK,SAACmC,GACLjB,EAASD,EAAMa,KAAI,SAAC3C,GAAD,OAAWA,EAAKW,KAAOA,EAAKX,EAAOgD,SAEvDC,OAAM,SAACC,GACNb,EAAY,SAAD,OACArC,EAAKK,QADL,0CAGX8C,YAAW,WACTd,EAAY,QACX,KACHN,EAASD,EAAMY,QAAO,SAACI,GAAD,OAAOA,EAAEnC,KAAOA,SAyBVyC,CAAmBpD,EAAKW,WAItD,0BAAM0C,SA3DM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBnD,QAAS2B,EACTpB,MAAM,IAAI6C,MAAOC,cACjBvD,UAAWwD,KAAKC,SAAW,IAG7BrB,EAAmBiB,GAAY3C,MAAK,SAACmB,GACnCD,EAASD,EAAMd,OAAOgB,IACtBC,EAAW,SAkDT,2BAAO4B,MAAO7B,EAAS8B,SA1BJ,SAACR,GACxBS,QAAQC,IAAIV,EAAMW,OAAOJ,OACzB5B,EAAWqB,EAAMW,OAAOJ,UAyBpB,4BAAQK,KAAK,UAAb,SAEF,kBAAC,EAAD,Q,MC9FNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.465a4b4a.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? \"make unimportant\" : \"make important\";\n  return (\n    <li className=\"note\">\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\n\nexport default Note;\n","import axios from \"axios\";\nconst baseUrl = \"/api/notes\";\n\n// const getAll = () => {\n//   const req = axios.get(baseUrl);\n//   return req.then((res) => res.data);\n// };\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  const nonExisting = {\n    id: 10000,\n    content: \"This note is not saved to server\",\n    date: \"2019-05-30T17:30:31.098Z\",\n    important: true,\n  };\n  return request.then((response) => response.data.concat(nonExisting));\n};\n\nconst create = (newObject) => {\n  const req = axios.post(baseUrl, newObject);\n  return req.then((res) => res.data);\n};\n\nconst update = (id, newObject) => {\n  const req = axios.put(`${baseUrl}/${id}`, newObject);\n  return req.then((res) => res.data);\n};\n// since key has same name as variable (value), can omit keyname\nexport default { getAll, create, update };\n","import React from \"react\";\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return <div className=\"error\">{message}</div>;\n};\n\nexport default Notification;\n","import React, { useState, useEffect } from \"react\";\nimport Note from \"./components/Note\";\nimport noteService from \"./services/notes\";\nimport Notification from \"./components/Notification\";\n\nconst Footer = () => {\n  const footerStyle = {\n    color: \"green\",\n    fontStyle: \"italic\",\n    fontSize: 16,\n  };\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>\n        Note app, Department of Computer Science, University of Helsinki 2020\n      </em>\n    </div>\n  );\n};\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"a new note...\");\n  const [showAll, setShowAll] = useState(true);\n  const [errorMsg, setErrorMsg] = useState(null);\n\n  const hook = () => {\n    noteService.getAll().then((initialNotes) => {\n      setNotes(initialNotes);\n    });\n  };\n\n  useEffect(hook, []);\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n    };\n\n    noteService.create(noteObject).then((newNote) => {\n      setNotes(notes.concat(newNote));\n      setNewNote(\"\");\n    });\n  };\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find((n) => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then((updatedNote) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : updatedNote)));\n      })\n      .catch((err) => {\n        setErrorMsg(\n          `Note '${note.content}' was already removed from the server`\n        );\n        setTimeout(() => {\n          setErrorMsg(null);\n        }, 5000);\n        setNotes(notes.filter((n) => n.id !== id));\n      });\n  };\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  };\n\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important);\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMsg} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}